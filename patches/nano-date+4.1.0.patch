diff --git a/node_modules/nano-date/dist/index.d.ts b/node_modules/nano-date/dist/index.d.ts
index 97cbca6..5d88fbe 100644
--- a/node_modules/nano-date/dist/index.d.ts
+++ b/node_modules/nano-date/dist/index.d.ts
@@ -1,5 +1,5 @@
 import BigNumber from 'bignumber.js';
-declare class NanoDate {
+export declare class NanoDate {
     readonly full: BigNumber;
     static now(): number;
     static parse(input: any): number;
diff --git a/node_modules/nano-date/dist/index.js b/node_modules/nano-date/dist/index.js
index befd7cb..f552677 100644
--- a/node_modules/nano-date/dist/index.js
+++ b/node_modules/nano-date/dist/index.js
@@ -565,4 +565,5 @@ class NanoDate {
 
 var _default = NanoDate;
 exports.default = _default;
+exports.NanoDate = NanoDate;
 //# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
