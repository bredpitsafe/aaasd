import type { Someseconds } from '@common/types';

import type { TContextState } from '../types';
import { computeSecondsAndSecondFractions } from './computeSecondsAndSecondFractions';

describe('computeSecondsAndSecondFractions', () => {
    const ctx: TContextState = {
        millisecondsToSomesecondsRatio: 1000000,
        somesecondsToMillisecondsRatio: 0.000001,
    } as TContextState;

    test.each([
        {
            input: [-1609459200000000000, -94608000000000000, -9295422000000000],
            output: [-1713362622, 0],
        },
        {
            input: [-1609459200000000000, -94608000000000000, -9295421500000000],
            output: [-1713362622, 500000000],
        },
        {
            input: [-1609459200000000000, -94608000000000000, -9295421000000000],
            output: [-1713362621, 0],
        },
        {
            input: [-1609459200000000000, -94608000000000000, -9295420500000000],
            output: [-1713362621, 500000000],
        },
        {
            input: [-1609459200000000000, -94608000000000000, -9295420000000000],
            output: [-1713362620, 0],
        },
        {
            input: [-1609459200000000000, -94608000000000000, -9295419500000000],
            output: [-1713362620, 500000000],
        },
        {
            input: [-1609459200000000000, -94608000000000000, -9295419000000000],
            output: [-1713362619, 0],
        },
        {
            input: [-1609459200000000000, -94608000000000000, -9295418500000000],
            output: [-1713362619, 500000000],
        },
        {
            input: [-1609459200000000000, -94608000000000000, -9295418000000000],
            output: [-1713362618, 0],
        },
        {
            input: [-1609459200000000000, -94608000000000000, -9295417500000000],
            output: [-1713362618, 500000000],
        },
        {
            input: [-1609459200000000000, -94608000000000000, -9295417000000000],
            output: [-1713362617, 0],
        },
    ])('%# negative numbers', ({ input, output }) => {
        expect(computeSecondsAndSecondFractions(ctx, ...(input as Someseconds[]))).toEqual(output);
    });

    test.each([
        {
            input: [-9295422000000000, 94608000000000000, 1609459200000000000],
            output: [1694771778, 0],
        },
        {
            input: [-9295421500000000, 94608000000000000, 1609459200000000000],
            output: [1694771778, 500000000],
        },
        {
            input: [-9295421000000000, 94608000000000000, 1609459200000000000],
            output: [1694771779, 0],
        },
        {
            input: [-9295420500000000, 94608000000000000, 1609459200000000000],
            output: [1694771779, 500000000],
        },
        {
            input: [-9295420000000000, 94608000000000000, 1609459200000000000],
            output: [1694771780, 0],
        },
        {
            input: [-9295419500000000, 94608000000000000, 1609459200000000000],
            output: [1694771780, 500000000],
        },
        {
            input: [-9295419000000000, 94608000000000000, 1609459200000000000],
            output: [1694771781, 0],
        },
        {
            input: [-9295418500000000, 94608000000000000, 1609459200000000000],
            output: [1694771781, 500000000],
        },
        {
            input: [-9295418000000000, 94608000000000000, 1609459200000000000],
            output: [1694771782, 0],
        },
        {
            input: [-9295417500000000, 94608000000000000, 1609459200000000000],
            output: [1694771782, 500000000],
        },
        {
            input: [-9295417000000000, 94608000000000000, 1609459200000000000],
            output: [1694771783, 0],
        },
    ])('%# negative and positive numbers', ({ input, output }) => {
        expect(computeSecondsAndSecondFractions(ctx, ...(input as Someseconds[]))).toEqual(output);
    });

    test.each([
        {
            input: [9295422000000000, 94608000000000000, 1609459200000000000],
            output: [1713362622, 0],
        },
        {
            input: [9295421500000000, 94608000000000000, 1609459200000000000],
            output: [1713362621, 500000000],
        },
        {
            input: [9295421000000000, 94608000000000000, 1609459200000000000],
            output: [1713362621, 0],
        },
        {
            input: [9295420500000000, 94608000000000000, 1609459200000000000],
            output: [1713362620, 500000000],
        },
        {
            input: [9295420000000000, 94608000000000000, 1609459200000000000],
            output: [1713362620, 0],
        },
        {
            input: [9295419500000000, 94608000000000000, 1609459200000000000],
            output: [1713362619, 500000000],
        },
        {
            input: [9295419000000000, 94608000000000000, 1609459200000000000],
            output: [1713362619, 0],
        },
        {
            input: [9295418500000000, 94608000000000000, 1609459200000000000],
            output: [1713362618, 500000000],
        },
        {
            input: [9295418000000000, 94608000000000000, 1609459200000000000],
            output: [1713362618, 0],
        },
        {
            input: [9295417500000000, 94608000000000000, 1609459200000000000],
            output: [1713362617, 500000000],
        },
        {
            input: [9295417000000000, 94608000000000000, 1609459200000000000],
            output: [1713362617, 0],
        },
    ])('%# positive numbers', ({ input, output }) => {
        expect(computeSecondsAndSecondFractions(ctx, ...(input as Someseconds[]))).toEqual(output);
    });
});
