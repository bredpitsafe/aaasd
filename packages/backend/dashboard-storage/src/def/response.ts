/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * @deprecated
 */
export type DashboardItem = DashboardsListItem & {
  draftDigest: string;
};


// TODO: remove this file after enums transfer into more appropriate place and tests fix
/**
 * @deprecated
 */
export interface Response {
  error?: ErrorResponse;
  payload?:
    | UnsubscribeResponse
    | PingResponse
    | HeartbeatResponse
    | AuthenticateResponse
    | LogoutResponse
    | SubscribeToDashboardResponse
    | SubscribeToDashboardsListResponse
    | FetchDashboardConfigResponse
    | FetchDashboardDraftResponse
    | CreateDashboardResponse
    | ImportDashboardResponse
    | UpdateDashboardResponse
    | UpdateDashboardDraftResponse
    | ResetDashboardDraftResponse
    | UpdateDashboardPermissionsResponse
    | UpdateDashboardShareSettingsResponse
    | DeleteDashboardResponse
    | SubscribeToDashboardPermissionsResponse
    | FetchDashboardIdByLegacyIdResponse
    | RenameDashboardResponse
    | UpdateDashboardScopeBindingResponse;
  timestamp: string;
  traceId: string;
  correlationId: number;
  state: ResponseState;
}
/**
 * @deprecated
 */
export interface ErrorResponse {
  kind: string;
  description: string;
  args?: {
    [k: string]: unknown;
  };
}
/**
 * @deprecated
 */
export interface UnsubscribeResponse {
  type: "Unsubscribed";
}
/**
 * @deprecated
 */
export interface PingResponse {
  type: "Pong";
}
/**
 * @deprecated
 */
export interface HeartbeatResponse {
  type: "Heartbeat";
}
/**
 * @deprecated
 */
export interface AuthenticateResponse {
  type: "Authenticated";
  username: string;
}
/**
 * @deprecated
 */
export interface LogoutResponse {
  type: "LoggedOut";
}
/**
 * @deprecated
 */
export interface SubscribeToDashboardResponse {
  type: "Dashboard";
  dashboard: DashboardItem;
}
/**
 * @deprecated
 */
export interface DashboardsListItem {
  id: string;
  name: string;
  kind: Kind;
  status: Status;
  digest?: string;
    // This is update time actually
  insertionTime: string;
  hasDraft: boolean;
  sharePermission: SharePermission;
  permission: Permission;
  owners: User[];
  permissionsCount?: number;
  scopes: Scope[];
}
/**
 * @deprecated
 */
export interface User {
  user: string;
}
/**
 * @deprecated
 */
export interface Scope {
  [k: string]: string | number | boolean | null;
}
/**
 * @deprecated
 */
export interface SubscribeToDashboardsListResponse {
  type: "DashboardsList";
  list: DashboardsListItem[];
}
/**
 * @deprecated
 */
export interface FetchDashboardConfigResponse {
  type: "DashboardConfig";
  config: string;
  digest: string;
}
/**
 * @deprecated
 */
export interface FetchDashboardDraftResponse {
  type: "DashboardDraft";
  draft: string;
  digest: string;
}
/**
 * @deprecated
 */
export interface CreateDashboardResponse {
  type: "DashboardCreated";
  id: string;
}
/**
 * @deprecated
 */
export interface ImportDashboardResponse {
  type: "DashboardImported";
  id: string;
}
/**
 * @deprecated
 */
export interface UpdateDashboardResponse {
  type: "DashboardUpdated";
}
/**
 * @deprecated
 */
export interface UpdateDashboardDraftResponse {
  type: "DashboardDraftUpdated";
}
/**
 * @deprecated
 */
export interface ResetDashboardDraftResponse {
  type: "DashboardDraftReset";
}
/**
 * @deprecated
 */
export interface UpdateDashboardPermissionsResponse {
  type: "PermissionsUpdated";
}
/**
 * @deprecated
 */
export interface UpdateDashboardShareSettingsResponse {
  type: "DashboardShareSettingsUpdated";
}
/**
 * @deprecated
 */
export interface DeleteDashboardResponse {
  type: "DashboardDeleted";
}
/**
 * @deprecated
 */
export interface SubscribeToDashboardPermissionsResponse {
  type: "DashboardPermissionsList";
  list: {
    user: string;
    permission: string;
  }[];
}
/**
 * @deprecated
 */
export interface FetchDashboardIdByLegacyIdResponse {
  type: "DashboardId";
  id: string;
}
/**
 * @deprecated
 */
export interface RenameDashboardResponse {
  type: "DashboardRenamed";
}
/**
 * @deprecated
 */
export interface UpdateDashboardScopeBindingResponse {
  type: "DashboardScopeBindingUpdated";
  platformTime: string;
}

// TODO: move this enums to the approriate place
export const enum Kind {
  User = "User",
  Robot = "Robot"
}
export const enum Status {
  Active = "Active",
  Suspended = "Suspended",
  Archived = "Archived"
}
export const enum SharePermission {
  None = "None",
  Viewer = "Viewer",
  Editor = "Editor"
}
export const enum Permission {
  None = "None",
  Viewer = "Viewer",
  Editor = "Editor",
  Owner = "Owner"
}
/**
 * @deprecated
 */
export const enum ResponseState {
  Done = "Done",
  InProgress = "InProgress"
}
