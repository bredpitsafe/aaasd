/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

// TODO: remove this file after enums transfer into more appropriate place and tests fix
/**
 * @deprecated
 */
export interface Request {
  payload:
    | UnsubscribeRequest
    | PingRequest
    | HeartbeatRequest
    | ServerHeartbeatRequest
    | AuthenticateRequest
    | LogoutRequest
    | SubscribeToDashboardRequest
    | SubscribeToDashboardsListRequest
    | FetchDashboardConfigRequest
    | FetchDashboardDraftRequest
    | CreateDashboardRequest
    | ImportDashboardRequest
    | UpdateDashboardRequest
    | UpdateDashboardDraftRequest
    | ResetDashboardDraftRequest
    | UpdateDashboardPermissionsRequest
    | UpdateDashboardShareSettingsRequest
    | DeleteDashboardRequest
    | SubscribeToDashboardPermissionsRequest
    | FetchDashboardIdByLegacyIdRequest
    | RenameDashboardRequest
    | UpdateDashboardScopeBindingRequest;
  timestamp: string;
  traceId: string;
  correlationId: number;
}
/**
 * @deprecated
 */
export interface UnsubscribeRequest {
  type: "Unsubscribe";
}
/**
 * @deprecated
 */
export interface PingRequest {
  type: "Ping";
  simulateInternalError?: boolean;
  simulateTimeout?: boolean;
}
/**
 * @deprecated
 */
export interface HeartbeatRequest {
  type: "Heartbeat";
}
/**
 * @deprecated
 */
export interface ServerHeartbeatRequest {
  type: "ServerHeartbeat";
}
/**
 * @deprecated
 */
export interface AuthenticateRequest {
  type: "Authenticate";
  bearerToken: string;
}
/**
 * @deprecated
 */
export interface LogoutRequest {
  type: "Logout";
}
/**
 * @deprecated
 */
export interface SubscribeToDashboardRequest {
  type: "SubscribeToDashboard";
  id: string;
}
/**
 * @deprecated
 */
export interface SubscribeToDashboardsListRequest {
  type: "SubscribeToDashboardsList";
  filters?: {
    include?: {
      scopes?: Scope[];
    };
    exclude?: {
      scopes?: Scope[];
    };
  };
}
/**
 * @deprecated
 */
export interface Scope {
  [k: string]: string | number | boolean | null;
}
/**
 * @deprecated
 */
export interface FetchDashboardConfigRequest {
  type: "FetchDashboardConfig";
  id: string;
  digest?: string;
}
/**
 * @deprecated
 */
export interface FetchDashboardDraftRequest {
  type: "FetchDashboardDraft";
  id: string;
  digest?: string;
}
/**
 * @deprecated
 */
export interface CreateDashboardRequest {
  type: "CreateDashboard";
  name: string;
  config: string;
}
/**
 * @deprecated
 */
export interface ImportDashboardRequest {
  type: "ImportDashboard";
  name: string;
  config: string;
  permission: Permission;
  legacyId: number;
}
/**
 * @deprecated
 */
export interface UpdateDashboardRequest {
  type: "UpdateDashboard";
  id: string;
  name: string;
  config: string;
  status: Status;
  digest: string;
}
/**
 * @deprecated
 */
export interface UpdateDashboardDraftRequest {
  type: "UpdateDashboardDraft";
  id: string;
  config: string;
}
/**
 * @deprecated
 */
export interface ResetDashboardDraftRequest {
  type: "ResetDashboardDraft";
  id: string;
}
/**
 * @deprecated
 */
export interface UpdateDashboardPermissionsRequest {
  type: "UpdateDashboardPermissions";
  id: string;
  permissions: {
    user: string;
    permission: Permission;
  }[];
}
/**
 * @deprecated
 */
export interface UpdateDashboardShareSettingsRequest {
  type: "UpdateDashboardShareSettings";
  id: string;
  sharePermission: SharePermission;
}
/**
 * @deprecated
 */
export interface DeleteDashboardRequest {
  type: "DeleteDashboard";
  id: string;
}
/**
 * @deprecated
 */
export interface SubscribeToDashboardPermissionsRequest {
  type: "SubscribeToDashboardPermissions";
  id: string;
}
/**
 * @deprecated
 */
export interface FetchDashboardIdByLegacyIdRequest {
  type: "FetchDashboardIdByLegacyId";
  legacyId: number;
}
/**
 * @deprecated
 */
export interface RenameDashboardRequest {
  type: "RenameDashboard";
  id: string;
  name: string;
}
/**
 * @deprecated
 */
export interface UpdateDashboardScopeBindingRequest {
  type: "UpdateDashboardScopeBinding";
  dashboardId: string;
  scope: Scope;
  action?: "bind" | "unbind";
}

// TODO: move this enums to the approriate place
export const enum Permission {
  None = "None",
  Viewer = "Viewer",
  Editor = "Editor",
  Owner = "Owner"
}
export const enum Status {
  Active = "Active",
  Suspended = "Suspended",
  Archived = "Archived"
}
export const enum SharePermission {
  None = "None",
  Viewer = "Viewer",
  Editor = "Editor"
}
